#if( $entity.hasCompositePrimaryKey() )
#set( $entityKeyType = ${entity.name} + "EntityKey" )
#else
#set( $entityKeyType = ${entity.keyAttributes[0].formattedType(0)} )
#end
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${SRC})};

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import ${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.Service.${entity.name}Service;
import ${ROOT_PKG}.Repository.${entity.name}Repository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ${entity.name}Service
 */
@Component
@Transactional
public class ${entity.name}ServiceImpl implements ${entity.name}Service {

	@Resource
	private ${entity.name}Repository ${fn.uncapitalize($entity.name)}Repository;
	
	@Override
	public ${entity.name} findById(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${entity.name} ${fn.uncapitalize($entity.name)} = ${fn.uncapitalize($entity.name)}Repository.findOne(id);
#else
		${entity.name} ${fn.uncapitalize($entity.name)} = ${fn.uncapitalize($entity.name)}Repository.findOne(${fn.argumentsList($entity.keyAttributes)});
#end
		return ${fn.uncapitalize($entity.name)};
	}

	@Override
	public List<${entity.name}> findAll() {
		List<${entity.name}> entities = (List<${entity.name}>) ${fn.uncapitalize($entity.name)}Repository.findAll();
		return entities;
	}

	@Override
	public ${entity.name} save(${entity.name} ${fn.uncapitalize($entity.name)}) {
		return update(${fn.uncapitalize($entity.name)}) ;
	}

	@Override
	public ${entity.name} create(${entity.name} ${fn.uncapitalize($entity.name)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
		${entity.name} ${fn.uncapitalize($entity.name)}Check = ${fn.uncapitalize($entity.name)}Repository.findOne(id);
#else
		${entity.name} ${fn.uncapitalize($entity.name)}Check = ${fn.uncapitalize($entity.name)}Repository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
#end
		if( ${fn.uncapitalize($entity.name)} != null ) {
			throw new IllegalStateException("already.exists");
		}
		${fn.uncapitalize($entity.name)}Check = new ${entity.name}();
		${entity.name} ${fn.uncapitalize($entity.name)}Saved = ${fn.uncapitalize($entity.name)}Repository.save(${fn.uncapitalize($entity.name)}Check);
		return ${fn.uncapitalize($entity.name)}Saved;
	}

	@Override
	public ${entity.name} update(${entity.name} ${fn.uncapitalize($entity.name)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
		${entity.name} ${fn.uncapitalize($entity.name)}Check = ${fn.uncapitalize($entity.name)}Repository.findOne(id);
#else
		${entity.name} ${fn.uncapitalize($entity.name)}Check = ${fn.uncapitalize($entity.name)}Repository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
#end
		${entity.name} ${fn.uncapitalize($entity.name)}Saved = ${fn.uncapitalize($entity.name)}Repository.save(${fn.uncapitalize($entity.name)}Check);
		return ${fn.uncapitalize($entity.name)}Saved;
	}

	@Override
	public void delete(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${fn.uncapitalize($entity.name)}Repository.delete(id);
#else
		${fn.uncapitalize($entity.name)}Repository.delete(${fn.argumentsList($entity.keyAttributes)});
#end
	}

	public ${entity.name}Repository get${entity.name}Repository() {
		return ${fn.uncapitalize($entity.name)}Repository;
	}

	public void set${entity.name}Repository(${entity.name}Repository ${fn.uncapitalize($entity.name)}Repository) {
		this.${fn.uncapitalize($entity.name)}Repository = ${fn.uncapitalize($entity.name)}Repository;
	}

}
